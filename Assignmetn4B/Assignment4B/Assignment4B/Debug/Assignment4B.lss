
Assignment4B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000202  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000acf  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bb  00000000  00000000  00000d73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000347  00000000  00000000  0000172e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d5  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000047  00000000  00000000  00001f91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a4 30       	cpi	r26, 0x04	; 4
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  d4:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <adc_init>:
volatile unsigned int adc;


void adc_init(void)
{
	ADMUX = (0<<REFS1)| // reference selection bit
  dc:	80 e6       	ldi	r24, 0x60	; 96
  de:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	(1<<REFS0)| //AVCC EXTERNAL CAP AT REF
	(1<<ADLAR)| //ADC LEFT ADJUST RESULT
	(0<<MUX2)| //ANALOG CHANNEL SELECTION BITS
	(0<<MUX1)| //ADC
	(0<<MUX0);
	ADCSRA = (1<<ADEN)| // ADC ENABLE
  e2:	87 e8       	ldi	r24, 0x87	; 135
  e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  e8:	08 95       	ret

000000ea <read_adc>:
	(1<<ADPS0); // SELECT CHANNEL
}
void read_adc(void)
{
	unsigned char i = 4;
	 adc = 0;
  ea:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  ee:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  f2:	24 e0       	ldi	r18, 0x04	; 4
	while(i--)
	{
		ADCSRA |=(1<<ADSC);
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
		while(ADCSRA & (1<<ADSC));
		adc += ADC;
  f8:	a8 e7       	ldi	r26, 0x78	; 120
  fa:	b0 e0       	ldi	r27, 0x00	; 0
{
	unsigned char i = 4;
	 adc = 0;
	while(i--)
	{
		ADCSRA |=(1<<ADSC);
  fc:	80 81       	ld	r24, Z
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	80 83       	st	Z, r24
		while(ADCSRA & (1<<ADSC));
 102:	80 81       	ld	r24, Z
 104:	86 fd       	sbrc	r24, 6
 106:	fd cf       	rjmp	.-6      	; 0x102 <read_adc+0x18>
		adc += ADC;
 108:	4d 91       	ld	r20, X+
 10a:	5c 91       	ld	r21, X
 10c:	11 97       	sbiw	r26, 0x01	; 1
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 116:	84 0f       	add	r24, r20
 118:	95 1f       	adc	r25, r21
 11a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 11e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	3f ef       	ldi	r19, 0xFF	; 255
 124:	80 e7       	ldi	r24, 0x70	; 112
 126:	92 e0       	ldi	r25, 0x02	; 2
 128:	31 50       	subi	r19, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <read_adc+0x3e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <read_adc+0x48>
 132:	00 00       	nop
 134:	21 50       	subi	r18, 0x01	; 1
}
void read_adc(void)
{
	unsigned char i = 4;
	 adc = 0;
	while(i--)
 136:	11 f7       	brne	.-60     	; 0xfc <read_adc+0x12>
		ADCSRA |=(1<<ADSC);
		while(ADCSRA & (1<<ADSC));
		adc += ADC;
		_delay_ms(50);
	}
	adc = (adc/8);
 138:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 13c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 140:	96 95       	lsr	r25
 142:	87 95       	ror	r24
 144:	96 95       	lsr	r25
 146:	87 95       	ror	r24
 148:	96 95       	lsr	r25
 14a:	87 95       	ror	r24
 14c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 150:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 154:	08 95       	ret

00000156 <main>:
}
int main(void)
{
	DDRB = 0x0F;//will be used as an output
 156:	8f e0       	ldi	r24, 0x0F	; 15
 158:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;// the voltage in it will be 0
 15a:	15 b8       	out	0x05, r1	; 5
	TCCR1B = (1 << WGM13)|(1 << WGM12)|(1 << CS11);// THE PRESSCALAR WILL BE AT 8
 15c:	8a e1       	ldi	r24, 0x1A	; 26
 15e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	ICR1 = 62258;
 162:	82 e3       	ldi	r24, 0x32	; 50
 164:	93 ef       	ldi	r25, 0xF3	; 243
 166:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 16a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>

	adc_init();
 16e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_init>
	while(1)
	{
		read_adc();
 172:	0e 94 75 00 	call	0xea	; 0xea <read_adc>
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	86 e7       	ldi	r24, 0x76	; 118
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x26>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x30>
 186:	00 00       	nop
 188:	f4 cf       	rjmp	.-24     	; 0x172 <main+0x1c>

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
